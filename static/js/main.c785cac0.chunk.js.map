{"version":3,"sources":["pages/Student/Student.js","pages/Class/Class.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["StudentList","props","List","Datagrid","TextField","source","ReferenceField","label","reference","EditButton","StudentShow","Show","SimpleShowLayout","ImageField","CreateOrEdit","id","Edit","title","Create","StudentCreateOrEdit","SimpleForm","TextInput","ReferenceInput","SelectInput","optionText","FileInput","FileField","ClassList","ClassShow","ArrayField","ClassCreateOrEdit","ArrayInput","SimpleFormIterator","AutocompleteInput","Theme","createMuiTheme","palette","type","primary","main","error","highlight","contrastText","secondary","colors","light","background","text","textLight","margin","small","regular","large","typography","fontFamily","size","smallest","largest","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","console","log","options","logging","rootRef","dataProvider","FirebaseDataProvider","authProvider","FirebaseAuthProvider","App","Admin","theme","Resource","name","list","edit","create","show","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c785cac0.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  List,\n  Datagrid,\n  Create,\n  Edit,\n  SimpleForm,\n  TextInput,\n  TextField,\n  Show,\n  SimpleShowLayout,\n  FileInput,\n  FileField,\n  ImageField,\n  EditButton,\n  ReferenceInput,\n  SelectInput,\n  ReferenceField,\n} from \"react-admin\";\n\nexport const StudentList = (props) => (\n  <List {...props}>\n    <Datagrid>\n      <TextField source=\"name\" />\n      <ReferenceField label=\"Turma\" source=\"class\" reference=\"classes\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <TextField source=\"email\" />\n      <TextField source=\"phone\" />\n      <TextField source=\"address\" />\n      <EditButton label=\"\" />\n    </Datagrid>\n  </List>\n);\n\nexport const StudentShow = (props) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"name\" />\n      <ReferenceField label=\"Turma\" source=\"class\" reference=\"classes\">\n        <TextField source=\"name\" />\n      </ReferenceField>\n      <TextField source=\"email\" />\n      <TextField source=\"phone\" />\n      <TextField source=\"address\" />\n      <ImageField source=\"image.src\" />\n    </SimpleShowLayout>\n  </Show>\n);\n\nconst CreateOrEdit = (props) => {\n  if (props.id) return <Edit title=\"Editar Aluno\" {...props} />;\n  return <Create title=\"Criar Aluno\" {...props} />;\n};\n\nexport const StudentCreateOrEdit = (props) => (\n  <CreateOrEdit {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n      <TextInput source=\"email\" />\n      <TextInput source=\"phone\" />\n      <TextInput source=\"address\" />\n      <ReferenceInput label=\"Turma\" source=\"class\" reference=\"classes\">\n        <SelectInput optionText=\"name\" />\n      </ReferenceInput>\n      <FileInput source=\"image\" label=\"Imagem\">\n        <FileField source=\"src\" title=\"title\" />\n      </FileInput>\n    </SimpleForm>\n  </CreateOrEdit>\n);\n","import React from \"react\";\nimport {\n  List,\n  Datagrid,\n  Create,\n  Edit,\n  SimpleForm,\n  TextInput,\n  TextField,\n  Show,\n  SimpleShowLayout,\n  EditButton,\n  ArrayInput,\n  SimpleFormIterator,\n  AutocompleteInput,\n  ReferenceInput,\n  ArrayField,\n  ReferenceField,\n} from \"react-admin\";\n\nexport const ClassList = (props) => (\n  <List {...props}>\n    <Datagrid>\n      <TextField source=\"name\" />\n      <TextField source=\"subject\" />\n      <EditButton label=\"\" />\n    </Datagrid>\n  </List>\n);\n\nexport const ClassShow = (props) => (\n  <Show {...props}>\n    <SimpleShowLayout>\n      <TextField source=\"name\" label=\"Nome\" />\n      <TextField source=\"subject\" label=\"Disciplina\" />\n      <ArrayField source=\"students\" label=\"Alunos\">\n        <Datagrid>\n          <ReferenceField label=\"Nome\" source=\"student\" reference=\"students\">\n            <TextField source=\"name\" />\n          </ReferenceField>\n          <ReferenceField\n            label=\"EndereÃ§o\"\n            source=\"student\"\n            reference=\"students\"\n          >\n            <TextField source=\"address\" />\n          </ReferenceField>\n        </Datagrid>\n      </ArrayField>\n    </SimpleShowLayout>\n  </Show>\n);\n\nconst CreateOrEdit = (props) => {\n  if (props.id) return <Edit title=\"Editar Aluno\" {...props} />;\n  return <Create title=\"Criar Aluno\" {...props} />;\n};\n\nexport const ClassCreateOrEdit = (props) => (\n  <CreateOrEdit {...props}>\n    <SimpleForm>\n      <TextInput source=\"name\" />\n      <TextInput source=\"subject\" />\n      <ArrayInput source=\"students\">\n        <SimpleFormIterator>\n          <ReferenceInput label=\"Nome\" source=\"student\" reference=\"students\">\n            <AutocompleteInput optionText=\"name\" />\n          </ReferenceInput>\n        </SimpleFormIterator>\n      </ArrayInput>\n    </SimpleForm>\n  </CreateOrEdit>\n);\n","import { createMuiTheme } from \"@material-ui/core\";\n\nconst Theme = createMuiTheme({\n  palette: {\n    type: \"light\",\n    primary: {\n      main: \"#80c8a7\",\n      error: \"#ffaaaa\",\n      highlight: \"#f1f1f1\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      main: \"#000\",\n    },\n  },\n  colors: {\n    primary: \"#2E3B80\",\n    secondary: \"#7159f1\",\n    light: \"#8A8A8A\",\n    background: \"#F5F5F5\",\n    title: \"#323232\",\n    text: \"#4B4B4B\",\n    textLight: \"#8a8a8a\",\n  },\n  margin: {\n    small: \"8px\",\n    regular: \"12px\",\n    large: \"16px\",\n  },\n  typography: {\n    fontFamily: {\n      primary: \"Open Sans\",\n      secondary: \"OpenSans\",\n    },\n    size: {\n      smallest: \"10px\",\n      small: \"14px\",\n      regular: \"16px\",\n      large: \"18px\",\n      largest: \"20px\",\n    },\n  },\n});\n\nexport default Theme;\n","import React from \"react\";\nimport { Admin, Resource } from \"react-admin\";\nimport { StudentCreateOrEdit, StudentList, StudentShow } from \"./pages/Student\";\nimport { ClassCreateOrEdit, ClassList, ClassShow } from \"./pages/Class\";\n\nimport {\n  FirebaseAuthProvider,\n  FirebaseDataProvider,\n} from \"react-admin-firebase\";\nimport Theme from \"./theme\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_APIKEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID,\n};\n\nconsole.log(\"CONFIG :: \", config);\n\nconst options = {\n  logging: true,\n  rootRef: \"root_collection/document\",\n};\nconst dataProvider = FirebaseDataProvider(config, options);\nconst authProvider = FirebaseAuthProvider(config, options);\n\nfunction App() {\n  return (\n    <Admin\n      dataProvider={dataProvider}\n      authProvider={authProvider}\n      theme={Theme}\n      // customSagas={[firebaseRealtime]}\n    >\n      <Resource\n        name=\"students\"\n        list={StudentList}\n        edit={StudentCreateOrEdit}\n        create={StudentCreateOrEdit}\n        show={StudentShow}\n      />\n      <Resource\n        name=\"classes\"\n        list={ClassList}\n        edit={ClassCreateOrEdit}\n        create={ClassCreateOrEdit}\n        show={ClassShow}\n      />\n    </Admin>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}